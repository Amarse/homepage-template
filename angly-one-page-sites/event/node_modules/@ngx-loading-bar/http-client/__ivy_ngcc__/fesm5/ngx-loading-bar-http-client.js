import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { __spread } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { finalize } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-loading-bar/core';
var LoadingBarInterceptor = /** @class */ (function () {
    function LoadingBarInterceptor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    LoadingBarInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        /** @type {?} */
        var r = next.handle(req);
        /** @type {?} */
        var started = false;
        /** @type {?} */
        var responseSubscribe = r.subscribe.bind(r);
        r.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, __spread(args));
        };
        return r.pipe(finalize(function () { return started && _this.loadingBar.complete(); }));
    };
    /** @nocollapse */
    LoadingBarInterceptor.ctorParameters = function () { return [
        { type: LoadingBarService }
    ]; };
LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) { return new (t || LoadingBarInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.LoadingBarService)); };
LoadingBarInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarInterceptor, factory: function (t) { return LoadingBarInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LoadingBarService }]; }, null); })();
    return LoadingBarInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingBarHttpClientModule = /** @class */ (function () {
    function LoadingBarHttpClientModule() {
    }
LoadingBarHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoadingBarHttpClientModule });
LoadingBarHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoadingBarHttpClientModule_Factory(t) { return new (t || LoadingBarHttpClientModule)(); }, providers: [
        { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
    ], imports: [[
            HttpClientModule,
            LoadingBarModule,
        ],
        HttpClientModule,
        LoadingBarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, { imports: function () { return [HttpClientModule,
        LoadingBarModule]; }, exports: function () { return [HttpClientModule,
        LoadingBarModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{
        type: NgModule,
        args: [{
                imports: [
                    HttpClientModule,
                    LoadingBarModule,
                ],
                exports: [
                    HttpClientModule,
                    LoadingBarModule,
                ],
                providers: [
                    { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                ]
            }]
    }], function () { return []; }, null); })();
    return LoadingBarHttpClientModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoadingBarHttpClientModule, LoadingBarInterceptor as ɵa };

//# sourceMappingURL=ngx-loading-bar-http-client.js.map